/*
========================================================================================
    WASP Nextflow Pipeline Configuration
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input options
    input                      = null
    outdir                     = './results'

    // Chromosome selection
    chromosome                 = 'chr11'

    // Reference genome options
    genome                     = null
    fasta                      = null
    gtf                        = null
    star_index                 = null
    gene_features              = null

    // Beagle options
    beagle_ref                 = null
    beagle_map                 = null

    // UMI options
    umi_separator              = ':'

    // Max resource options
    max_memory                 = '28.GB'
    max_cpus                   = 8
    max_time                   = '240.h'

    // Boilerplate options
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    tracedir                   = "${params.outdir}/pipeline_info"
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = true

    // Config options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Default container
    container                  = 'nfcore/wasp:latest'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'ASENext'
    author          = 'Abu Saadat'
    homePage        = 'https://github.com/abusaadat/ASENext'
    description     = 'Nextflow pipeline for allele-specific expression analysis using WASP'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


profiles {
    docker {
        docker.enabled = true
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }

    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }

    conda {
        conda.enabled = true
    }
}

process {
  withName: 'BCFTOOLS_VIEW' {
    ext.args = "-r ${params.chromosome} -f PASS -Oz"
  }
}

process {
    withLabel: 'error_ignore' {
        errorStrategy = 'ignore'
    }
    
    // Debug all processes
    beforeScript = 'echo "Starting ${task.process} with ${task.cpus} CPUs and ${task.memory}"'
}
