/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of metadata to publish by (e.g. ['id']).
        publish_files   = Groovy map of file names and publish locations.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: STAR_ALIGN {
        ext.args = [
            '--outSAMtype BAM SortedByCoordinate',
            '--outSAMattributes NH HI AS nM NM MD jM jI rB MC vA vG vW',
            '--alignEndsType EndToEnd',
            '--outSAMunmapped Within',
            '--outFilterMultimapNmax 1',
            '--waspOutputMode SAMtag'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTER_WASP_READS {
        ext.args = "-h | awk 'BEGIN{FS=\"\\t\"; OFS=\"\\t\"} /^@/ || \$0 !~ /vW:i:1/' | samtools view -b"
        publishDir = [
            path: { "${params.outdir}/wasp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UMITOOLS_DEDUP {
        ext.args = "--extract-umi-method=read_id --umi-separator=\"${params.umi_separator}\""
        publishDir = [
            path: { "${params.outdir}/umi" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_SORT {
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_VIEW {
        ext.args = "-r ${params.chromosome} -f PASS -Oz"
        publishDir = [
            path: { "${params.outdir}/vcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BEAGLE5_BEAGLE {
        publishDir = [
            path: { "${params.outdir}/beagle" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHASER {
        publishDir = [
            path: { "${params.outdir}/phaser" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHASER_GENE_AE {
        publishDir = [
            path: { "${params.outdir}/phaser" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_ASE_GENES {
        publishDir = [
            path: { "${params.outdir}/ase" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC {
        ext.args = '--config $multiqc_config'
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
